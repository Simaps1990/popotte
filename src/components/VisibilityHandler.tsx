import { useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';

/**
 * Composant qui gÃ¨re les Ã©vÃ©nements de visibilitÃ© du document
 * pour Ã©viter le rechargement de l'application et le spinner infini
 * lors du retour sur l'onglet/fenÃªtre
 */
const VisibilityHandler: React.FC = () => {
  // AccÃ©der au contexte d'authentification pour gÃ©rer l'Ã©tat de chargement
  const { loading, setLoadingState } = useAuth();
  
  // Fonction pour masquer le spinner de chargement
  const hideLoadingSpinner = () => {
    // Rechercher le spinner de chargement dans le DOM
    const spinnerElement = document.querySelector('.animate-spin');
    const loadingContainer = spinnerElement?.parentElement;
    
    // Si le spinner est trouvÃ©, le masquer
    if (spinnerElement && loadingContainer) {
      console.log('ðŸ”„ Spinner de chargement dÃ©tectÃ© - Masquage forcÃ©');
      // Utiliser un cast pour rÃ©soudre l'erreur TypeScript
      (loadingContainer as HTMLElement).style.display = 'none';
      
      // ForÃ§age de l'Ã©tat de chargement Ã  false dans le contexte Auth
      if (setLoadingState && loading) {
        setLoadingState(false);
      }
      
      return true;
    }
    
    return false;
  };
  
  useEffect(() => {
    // Variable pour suivre si l'application Ã©tait visible auparavant
    let wasVisible = true;
    
    // Fonction pour gÃ©rer les changements de visibilitÃ©
    const handleVisibilityChange = () => {
      const isVisible = !document.hidden;
      
      if (!wasVisible && isVisible) {
        // L'utilisateur revient sur l'application aprÃ¨s l'avoir quittÃ©e
        console.log('ðŸ”„ Retour sur l\'application - PrÃ©servation de l\'Ã©tat');
        
        // ArrÃªter tout chargement en cours
        if (window.stop) {
          window.stop();
        }
        
        // Masquer le spinner de chargement s'il est prÃ©sent
        hideLoadingSpinner();
        
        // RÃ©activer les Ã©lÃ©ments d'interface utilisateur
        setTimeout(() => {
          // RÃ©cupÃ©rer l'Ã©lÃ©ment racine de l'application
          const rootElement = document.getElementById('root');
          
          if (rootElement) {
            // RÃ©tablir l'affichage normal de l'application
            const appContent = rootElement.querySelector(':scope > div:not(#_rht_toaster)');
            if (appContent) {
              // Utiliser un cast pour rÃ©soudre l'erreur TypeScript
              (appContent as HTMLElement).style.display = '';
            }
          }
          
          // VÃ©rifier Ã  nouveau si le spinner est toujours visible
          hideLoadingSpinner();
        }, 100);
      }
      
      // Mettre Ã  jour l'Ã©tat de visibilitÃ©
      wasVisible = isVisible;
    };
    
    // Ajouter l'Ã©couteur d'Ã©vÃ©nements de visibilitÃ©
    document.addEventListener('visibilitychange', handleVisibilityChange);
    
    // Nettoyer l'Ã©couteur lors du dÃ©montage du composant
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [loading]);
  
  // Ajouter un gestionnaire pour l'Ã©vÃ©nement 'focus' de la fenÃªtre
  useEffect(() => {
    const handleFocus = () => {
      console.log('ðŸ”„ FenÃªtre a reÃ§u le focus - PrÃ©servation de l\'Ã©tat');
      
      // EmpÃªcher tout rechargement potentiel
      if (window.stop) {
        window.stop();
      }
      
      // Masquer le spinner de chargement s'il est prÃ©sent
      hideLoadingSpinner();
    };
    
    window.addEventListener('focus', handleFocus);
    
    return () => {
      window.removeEventListener('focus', handleFocus);
    };
  }, [loading]);
  
  // Ajouter un gestionnaire pour l'Ã©vÃ©nement 'pageshow'
  useEffect(() => {
    const handlePageShow = (event: PageTransitionEvent) => {
      // Si la page est chargÃ©e depuis le cache (retour avec bouton prÃ©cÃ©dent)
      if (event.persisted) {
        console.log('ðŸ”„ Page restaurÃ©e depuis le cache - PrÃ©servation de l\'Ã©tat');
        
        // EmpÃªcher tout rechargement potentiel
        if (window.stop) {
          window.stop();
        }
        
        // Masquer le spinner de chargement s'il est prÃ©sent
        hideLoadingSpinner();
      }
    };
    
    window.addEventListener('pageshow', handlePageShow);
    
    return () => {
      window.removeEventListener('pageshow', handlePageShow);
    };
  }, [loading]);
  
  // Ce composant ne rend rien visuellement
  return null;
};

export default VisibilityHandler;
