import { useState, useEffect, useRef } from 'react';
import { supabase } from '../lib/supabaseClient';
import { SyncEventType, SupabaseEventPayload } from '../services/syncTypes';
import { toast } from 'react-hot-toast';

/**
 * Hook personnalisÃ© pour gÃ©rer l'abonnement aux mises Ã  jour des produits et catÃ©gories
 * Centralise les abonnements pour Ã©viter les duplications
 * @param onProductUpdate Callback appelÃ© lors d'une mise Ã  jour de produit
 * @param onCategoryUpdate Callback appelÃ© lors d'une mise Ã  jour de catÃ©gorie
 * @returns Un objet avec un flag indiquant la derniÃ¨re mise Ã  jour
 */
export function useProductSubscription(
  onProductUpdate?: () => void,
  onCategoryUpdate?: () => void
) {
  const [lastUpdate, setLastUpdate] = useState<number>(0);
  const productChannelRef = useRef<any>(null);
  const categoryChannelRef = useRef<any>(null);

  // Mise Ã  jour instantanÃ©e sans dÃ©lai
  const handleProductUpdate = (payload: SupabaseEventPayload) => {
    const now = Date.now();
    const eventType = payload.eventType;
    const id = payload.new?.id || payload.old?.id;
    console.log('âš¡ [useProductSubscription] Mise Ã  jour produit instantanÃ©e:', eventType, id);
    
    // Notification toast
    if (eventType === 'UPDATE') {
      toast.success('Produit mis Ã  jour', { duration: 2000 });
    } else if (eventType === 'INSERT') {
      toast.success('Nouveau produit ajoutÃ©', { duration: 2000 });
    } else if (eventType === 'DELETE') {
      toast.success('Produit supprimÃ©', { duration: 2000 });
    }
    
    // Mise Ã  jour immÃ©diate sans dÃ©lai
    setLastUpdate(now);
    if (onProductUpdate) onProductUpdate();
  };

  const handleCategoryUpdate = (payload: SupabaseEventPayload) => {
    const now = Date.now();
    const eventType = payload.eventType;
    const id = payload.new?.id || payload.old?.id;
    console.log('âš¡ [useProductSubscription] Mise Ã  jour catÃ©gorie instantanÃ©e:', eventType, id);
    
    // Notification toast
    if (eventType === 'UPDATE') {
      toast.success('CatÃ©gorie mise Ã  jour', { duration: 2000 });
    } else if (eventType === 'INSERT') {
      toast.success('Nouvelle catÃ©gorie ajoutÃ©e', { duration: 2000 });
    } else if (eventType === 'DELETE') {
      toast.success('CatÃ©gorie supprimÃ©e', { duration: 2000 });
    }
    
    // Mise Ã  jour immÃ©diate sans dÃ©lai
    setLastUpdate(now);
    if (onCategoryUpdate) onCategoryUpdate();
  };

  useEffect(() => {
    console.log('ðŸ”„ Initialisation des abonnements centralisÃ©s aux produits et catÃ©gories');
    
    // S'assurer qu'il n'y a pas dÃ©jÃ  des abonnements actifs
    if (productChannelRef.current) {
      console.log('ðŸ”„ DÃ©sabonnement de l\'ancien abonnement produits');
      productChannelRef.current.unsubscribe();
      productChannelRef.current = null;
    }
    
    if (categoryChannelRef.current) {
      console.log('ðŸ”„ DÃ©sabonnement de l\'ancien abonnement catÃ©gories');
      categoryChannelRef.current.unsubscribe();
      categoryChannelRef.current = null;
    }
    
    // CrÃ©er un nouvel abonnement pour les produits
    const productChannel = supabase.channel('global_product_changes_' + Date.now())
      .on('postgres_changes', 
        { 
          event: '*',
          schema: 'public',
          table: 'products'
        }, 
        (payload: any) => {
          console.log('ðŸ“¡ [useProductSubscription] Changement de produit dÃ©tectÃ©:', payload.eventType, payload.new?.id || payload.old?.id);
          handleProductUpdate(payload);
        }
      )
      .subscribe((status: string) => {
        console.log('ðŸ”Š [useProductSubscription] Statut abonnement produits:', status);
      });
    
    // CrÃ©er un nouvel abonnement pour les catÃ©gories
    const categoryChannel = supabase.channel('global_category_changes_' + Date.now())
      .on('postgres_changes', 
        { 
          event: '*',
          schema: 'public',
          table: 'categories'
        }, 
        (payload: any) => {
          console.log('ðŸ“¡ [useProductSubscription] Changement de catÃ©gorie dÃ©tectÃ©:', payload.eventType, payload.new?.id || payload.old?.id);
          handleCategoryUpdate(payload);
        }
      )
      .subscribe((status: string) => {
        console.log('ðŸ”Š [useProductSubscription] Statut abonnement catÃ©gories:', status);
      });
    
    // Stocker les rÃ©fÃ©rences aux canaux
    productChannelRef.current = productChannel;
    categoryChannelRef.current = categoryChannel;
    
    // Nettoyage lors du dÃ©montage du composant
    return () => {
      console.log('ðŸ§¹ Nettoyage des abonnements aux produits et catÃ©gories');
      if (productChannelRef.current) {
        productChannelRef.current.unsubscribe();
        productChannelRef.current = null;
      }
      
      if (categoryChannelRef.current) {
        categoryChannelRef.current.unsubscribe();
        categoryChannelRef.current = null;
      }
    };
  }, []);
  
  return { lastUpdate };
}
