import { useState, useEffect, useRef } from 'react';
import { debtService } from '../services/debtService';

/**
 * Hook personnalisÃ© pour gÃ©rer l'abonnement aux mises Ã  jour des dettes
 * Centralise les abonnements pour Ã©viter les duplications
 * @param userId ID de l'utilisateur
 * @param onUpdate Callback appelÃ© lors d'une mise Ã  jour
 * @returns Un objet avec un flag indiquant si une mise Ã  jour a Ã©tÃ© reÃ§ue
 */
export function useDebtSubscription(userId: string | undefined, onUpdate?: () => void) {
  const [lastUpdate, setLastUpdate] = useState<number>(0);
  const activeSubscriptionRef = useRef<(() => void) | null>(null);
  const debounceTimerRef = useRef<NodeJS.Timeout | null>(null);

  // Mise Ã  jour instantanÃ©e sans dÃ©lai
  const handleUpdate = () => {
    const now = Date.now();
    console.log('âš¡ [useDebtSubscription] Mise Ã  jour instantanÃ©e');
    
    // Mise Ã  jour immÃ©diate sans dÃ©lai
    setLastUpdate(now);
    if (onUpdate) onUpdate();
  };

  useEffect(() => {
    // Ne s'abonner que si l'userId est dÃ©fini
    if (!userId) return;
    
    console.log(`ðŸ”„ Initialisation de l'abonnement centralisÃ© aux dettes pour l'utilisateur ${userId}`);
    
    // S'assurer qu'il n'y a pas dÃ©jÃ  un abonnement actif
    if (activeSubscriptionRef.current) {
      console.log('ðŸ”„ DÃ©sabonnement de l\'ancien abonnement');
      activeSubscriptionRef.current();
      activeSubscriptionRef.current = null;
    }
    
    // CrÃ©er un nouvel abonnement
    const unsubscribe = debtService.subscribeToDebtUpdates(userId, (payload) => {
      console.log('ðŸ“¡ [useDebtSubscription] Mise Ã  jour reÃ§ue:', payload);
      handleUpdate();
    });
    
    // Stocker la fonction de dÃ©sabonnement
    activeSubscriptionRef.current = unsubscribe;
    
    // Nettoyage lors du dÃ©montage du composant
    return () => {
      console.log('ðŸ§¹ Nettoyage de l\'abonnement aux dettes');
      if (activeSubscriptionRef.current) {
        activeSubscriptionRef.current();
        activeSubscriptionRef.current = null;
      }
      
      if (debounceTimerRef.current) {
        clearTimeout(debounceTimerRef.current);
        debounceTimerRef.current = null;
      }
    };
  }, [userId]);
  
  return { lastUpdate };
}
